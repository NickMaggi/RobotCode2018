package org.usfirst.frc3098.RobotTemplate.subsystems;

import org.usfirst.frc3098.RobotTemplate.Robot;
import org.usfirst.frc3098.RobotTemplate.RobotMap;
import org.usfirst.frc3098.RobotTemplate.commands.*;
import org.usfirst.frc3098.RobotTemplate.util.Constants;

import edu.wpi.first.wpilibj.command.Subsystem;

import com.ctre.phoenix.motorcontrol.FeedbackDevice;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;



/**
 *
 */
public class DriveTrain extends Subsystem {

    private final WPI_TalonSRX leftFrontTalon = RobotMap.driveTrainLeftFrontTalon;
    private final WPI_TalonSRX leftMiddleTalon = RobotMap.driveTrainLeftMiddleTalon;
    private final WPI_TalonSRX leftBackTalon = RobotMap.driveTrainLeftBackTalon;
    private final WPI_TalonSRX rightFrontTalon = RobotMap.driveTrainRightFrontTalon;
    private final WPI_TalonSRX rightMiddleTalon = RobotMap.driveTrainRightMiddleTalon;
    private final WPI_TalonSRX rightBackTalon = RobotMap.driveTrainRightBackTalon;
    private boolean leftSideOutputInverted, rightSideOutputInverted, leftBumperStateLastScan, driveTrainOrientationIsReversed;

    public DriveTrain()
    {
    	
    	//FOLLOW MUST COME BEFORE INVERT, OR ELSE THERE IS ODD BEHAVIOR -Tony Arroyo 02/05/18
    
    	leftBumperStateLastScan = false;
    	driveTrainOrientationIsReversed = false;
    	
    	leftSideOutputInverted = true;
    	rightSideOutputInverted = false;
    	
    	leftFrontTalon.follow(leftMiddleTalon);
    	leftFrontTalon.setInverted(leftSideOutputInverted);
    	
    	leftMiddleTalon.setInverted(leftSideOutputInverted);
    	leftMiddleTalon.setSensorPhase(false);
    	leftMiddleTalon.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, 0);
    	
    	leftBackTalon.follow(leftMiddleTalon);
    	leftBackTalon.setInverted(leftSideOutputInverted);
    	
    	rightFrontTalon.follow(rightMiddleTalon);
    	rightFrontTalon.setInverted(rightSideOutputInverted);
    	
    	rightMiddleTalon.setInverted(rightSideOutputInverted);
    	rightMiddleTalon.setSensorPhase(false);
    	rightMiddleTalon.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, 0);
    	
    	rightBackTalon.follow(rightMiddleTalon);
    	rightBackTalon.setInverted(rightSideOutputInverted);

    }
    
    @Override
    public void initDefaultCommand() {
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    	setDefaultCommand(new CmdDriveTrainJoystickDrive());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    	//Button for reversing DriveTrain
    	if(Robot.oi.joystickDriver.getRawButton(Constants.LEFT_BUMPER) && !leftBumperStateLastScan)
    	{
    		driveTrainOrientationIsReversed = !driveTrainOrientationIsReversed;    		
    	}
    	leftBumperStateLastScan = Robot.oi.joystickDriver.getRawButton(Constants.LEFT_BUMPER);
    	
    	SmartDashboard.putBoolean("driveTrainOrientationIsReversed", driveTrainOrientationIsReversed);
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public void updateDriveSpeeds(double leftMotorSpeed, double rightMotorSpeed)
    {
    
   		leftMiddleTalon.set(leftMotorSpeed);
   		rightMiddleTalon.set(rightMotorSpeed);    		
    
    }

	public boolean isRightSideOutputInverted() {
		return driveTrainOrientationIsReversed;
	}

}

